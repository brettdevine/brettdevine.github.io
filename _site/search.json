[
  {
    "objectID": "projects/practice_file_1.html",
    "href": "projects/practice_file_1.html",
    "title": "Practice File",
    "section": "",
    "text": "A practice document using the “USArrests” data.\nSo here is where I’d have lots of things to say and such. So this is where we add text, lets emphasize that if we are not too bold.\n\ndata(USArrests)\n\nWe could also look at how the scatter plots above are showing the correlation coefficient. \\[\n\\begin{align}\n    \\rho(X,Y) = \\frac{Cov(X,Y)}{Var(X)\\cdot V(Y)}\n\\end{align}\n\\]\nAnd the cool thing is, the math worked out quite well\n\nplot(USArrests)"
  },
  {
    "objectID": "projects/Basic_Bagging.html",
    "href": "projects/Basic_Bagging.html",
    "title": "Basic Bagging",
    "section": "",
    "text": "In this document we play around with growing a basic bagging techniques for a simple regression problem. We have a target feature \\(Y\\) and use a single predictor, \\(X\\). The data has been simulated so that we can easily visualize the “true” relationship between \\(Y\\) and \\(X\\) that exist in the population. This relationship is super-imposed on a scatter plot allowing us to clearly see the role of noise.\nThe code below generates the simulated data and plots the relationship for us to clearly see.\nIn the above plot, the thick transparent blue line represents the true relationship between \\(X\\) and \\(Y\\) that would enable us to make the best predictions. However, there is always noise and it affects the relationship between \\(X\\) and \\(Y\\) such that outcomes are scattered all around the blue line.\nWe’re going to use a machine learning method known as a decision tree (or a regression tree when applied to regression problems). This method will use a simple algorithm to gradually build a set of if-then rules which will allow us to predict \\(Y\\) from the value of \\(X\\). As the rules increase and the model gets more complex, the predicted relationship gets closer to the true one. However, if we allow the model to grow too complex (come up with too many rules based on the 1 sample), it will begin to “fit to the noise” which is overfitting. We start making rules that we shouldn’t be.\nDecision trees are based on rules. For example if \\(X > 5\\) then predict \\(Y = 10\\) but if \\(X \\leq 5\\) then predict \\(Y = 7\\). We stack lots of these rules in a tree-like structure to build a prediction machine. The question point, i.e., \\(X > 5\\), is often referred to as a threshold. We seek to choose these thresholds (and thereby build the tree) in a way that reduces prediction error with each new rule. We can measure prediction error a number of ways, but we’ll use SSE (sum of squared errors).\nWe can test many values of \\(X\\) to determine which threshold point would decrease SSE the most.\nIn the code below, we use the rpart.control function to control the rpart() tree building function in R. This executes the algorithm and we can change hyperparameters to control the tree’s growth, or “prune” its branches after its growth (more on this later).\nThe notebook is setup so that you can edit the tree growth hyperparameters and then train the tree and then view a picture of it, along with the predictions it makes on the scatter plot.\nAbove we have the ability to compare the model’s RMSE to the sample mean and sample standard deviatio of \\(Y\\). The size of the mean compared to our error gives us context into the size of our error. If its a very small percentage of the mean, then our errors are relatively small. Additionally, the standard deviation is already a measure of error (essentially the RMSE of the mean) and spread in the data. If our model’s RMSE is not significantly smaller than the standard deviation, then we’re not reducing the uncertainty in our predictions. Each time we increase the complexity, we should be looking for the RMSE to decrease.\nBelow we can view an image of the tree that was learned along with the rules it learned. Additionally, we see the predicted values (red line) generated by the tree compared to the actual values (points) and the true relationship (blue line).\nCreating some test data."
  },
  {
    "objectID": "projects/Basic_Bagging.html#bagged-linear-regression",
    "href": "projects/Basic_Bagging.html#bagged-linear-regression",
    "title": "Basic Bagging",
    "section": "Bagged Linear Regression",
    "text": "Bagged Linear Regression\nHere we will use a simple linear regression model on the data, but employ bagging (bootstrap aggregation). We will bootstrap 50 different training sets and perform a simple linear regression on each. The predictions resulting from each bootstrap will be plotted against the data, as well as the average (aggregation) of those bootstrapped models.\n\nboots = data.frame(\"X\"=NULL, \"predictions\"=NULL, \"modelNo\"=NULL)\nboot.rmse = c()\nnum.boots = 50\nfor(i in 1:num.boots) {\n  B = data[sample(c(1:nrow(data)), nrow(data), replace = TRUE), ]\n  m = lm(Y ~ poly(X,4), data = B)\n  X.vals = data.frame(\"X\"=seq(min(data$X), max(data$X), 0.5))\n  boots.append = data.frame(\"X\"=X.vals, \"predictions\"=predict(m, X.vals), \"model\"=i)\n  boots = boots %>% bind_rows(boots.append)\n  boot.test = predict(m, newdata = testing)\n  boot.rmse[i] = caret::RMSE(boot.test, testing$Y)\n}\navg.mod = boots %>% group_by(X) %>% summarize(predictions = mean(predictions))\nmean(boot.rmse)\n\n[1] 1.688976\n\n\n\nggplot() +\n  geom_point(data = data, aes(x=X,y=Y), pch=21, color=\"black\", bg=\"gray\", size=2) +\n  geom_line(aes(x=X,y=TRUE_Y), color = \"deepskyblue\", alpha = 0.4, size =3) +\n  geom_line(data = boots, aes(x=X,y=predictions, group=model), alpha=0.3)  +\n  geom_line(data = avg.mod, aes(x=X,y=predictions), color = \"red\", size = 2, alpha = 0.8)\n\n\n\n  theme_clean()\n\nList of 94\n $ line                      :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.545\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                      :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.545\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                      :List of 11\n  ..$ family       : chr \"sans\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 12\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                     : NULL\n $ aspect.ratio              : NULL\n $ axis.title                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 10\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 3points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top          :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 3points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom       : NULL\n $ axis.title.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 3points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left         : NULL\n $ axis.title.y.right        :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 3points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 9\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.4points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top           :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.4points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom        : NULL\n $ axis.text.y               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.4points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left          : NULL\n $ axis.text.y.right         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.4points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                :List of 6\n  ..$ colour       : NULL\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x              : NULL\n $ axis.ticks.x.top          : NULL\n $ axis.ticks.x.bottom       : NULL\n $ axis.ticks.y              : NULL\n $ axis.ticks.y.left         : NULL\n $ axis.ticks.y.right        : NULL\n $ axis.ticks.length         : 'simpleUnit' num 3points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x       : NULL\n $ axis.ticks.length.x.top   : NULL\n $ axis.ticks.length.x.bottom: NULL\n $ axis.ticks.length.y       : NULL\n $ axis.ticks.length.y.left  : NULL\n $ axis.ticks.length.y.right : NULL\n $ axis.line                 : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x               :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : chr \"solid\"\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.line.x.top           : NULL\n $ axis.line.x.bottom        : NULL\n $ axis.line.y               :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : chr \"solid\"\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.line.y.left          : NULL\n $ axis.line.y.right         : NULL\n $ legend.background         :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin             : 'margin' num [1:4] 6points 6points 6points 6points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing            : 'simpleUnit' num 12points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x          : NULL\n $ legend.spacing.y          : NULL\n $ legend.key                :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.key.size           : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height         : NULL\n $ legend.key.width          : NULL\n $ legend.text               :List of 11\n  ..$ family       : chr \"sans\"\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 11\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.align         : NULL\n $ legend.title              :List of 11\n  ..$ family       : chr \"sans\"\n  ..$ face         : chr \"bold\"\n  ..$ colour       : NULL\n  ..$ size         : num 12\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.align        : NULL\n $ legend.position           : chr \"right\"\n $ legend.direction          : NULL\n $ legend.justification      : chr \"center\"\n $ legend.box                : NULL\n $ legend.box.just           : NULL\n $ legend.box.margin         : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background     : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing        : 'simpleUnit' num 12points\n  ..- attr(*, \"unit\")= int 8\n $ panel.background          : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.border              : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.spacing             : 'simpleUnit' num 6points\n  ..- attr(*, \"unit\")= int 8\n $ panel.spacing.x           : NULL\n $ panel.spacing.y           : NULL\n $ panel.grid                :List of 6\n  ..$ colour       : NULL\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ panel.grid.major          : NULL\n $ panel.grid.minor          : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.grid.major.x        : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.grid.major.y        :List of 6\n  ..$ colour       : chr \"gray\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : chr \"dotted\"\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ panel.grid.minor.x        : NULL\n $ panel.grid.minor.y        : NULL\n $ panel.ontop               : logi FALSE\n $ plot.background           :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ plot.title                :List of 11\n  ..$ family       : NULL\n  ..$ face         : chr \"bold\"\n  ..$ colour       : NULL\n  ..$ size         : num 14\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 6points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.title.position       : chr \"panel\"\n $ plot.subtitle             :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 13\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 6points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : num 1\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 6points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption.position     : chr \"panel\"\n $ plot.tag                  :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 1.2\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.tag.position         : chr \"topleft\"\n $ plot.margin               : 'margin' num [1:4] 6points 6points 6points 6points\n  ..- attr(*, \"unit\")= int 8\n $ strip.background          :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : NULL\n  ..$ linewidth    : NULL\n  ..$ linetype     : num 0\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ strip.background.x        : NULL\n $ strip.background.y        : NULL\n $ strip.clip                : chr \"inherit\"\n $ strip.placement           : chr \"inside\"\n $ strip.text                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 4.8points 4.8points 4.8points 4.8points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.text.x              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0.5\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.text.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.switch.pad.grid     : 'simpleUnit' num 3points\n  ..- attr(*, \"unit\")= int 8\n $ strip.switch.pad.wrap     : 'simpleUnit' num 3points\n  ..- attr(*, \"unit\")= int 8\n $ strip.text.y.left         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\n\nSmaller Less Flexible Trees\n\nboots = data.frame(\"X\"=NULL, \"predictions\"=NULL, \"modelNo\"=NULL)\nboot.rmse = c()\nnum.boots = 100\nfor(i in 1:num.boots) {\n  B = data[sample(c(1:nrow(data)), nrow(data), replace = TRUE), ]\n  m = rpart(Y ~ X, data = B,\n            cp = 0.0,\n            minsplit = 1,\n            minbucket = 1,\n            maxdepth = 2)\n  X.vals = data.frame(\"X\"=seq(min(data$X), max(data$X), 0.1))\n  boots.append = data.frame(\"X\"=X.vals, \"predictions\"=predict(m, X.vals), \"model\"=i)\n  boots = boots %>% bind_rows(boots.append)\n  boot.test = predict(m, newdata = testing)\n  boot.rmse[i] = caret::RMSE(boot.test, testing$Y)\n}\navg.mod = boots %>%\n  group_by(X) %>%\n  summarize(predictions = mean(predictions))\nmean(boot.rmse)\n\n[1] 1.624439\n\n\n\nggplot() +\n  geom_point(data = data, aes(x=X,y=Y), pch=21, color=\"black\", bg=\"gray\", size=2) +\n  geom_line(aes(x=X,y=TRUE_Y), color = \"deepskyblue\", alpha = 0.4, size =3) +\n  geom_line(data = boots, aes(x=X,y=predictions, group=model), alpha=0.3) +\n  geom_line(data = avg.mod, aes(x=X, y=predictions), size=2, color=\"red\", alpha=0.7) +\n  labs(title = \"Bootstrap Aggregated Shallow/Stiff Trees\") +\n  theme_clean()\n\n\n\n\n\n\nHighly Flexible Overfitted Trees\n\nboots = data.frame(\"X\"=NULL, \"predictions\"=NULL, \"modelNo\"=NULL)\nboot.rmse = c()\nnum.boots = 100\nfor(i in 1:num.boots) {\n  B = data[sample(c(1:nrow(data)), nrow(data), replace = TRUE), ]\n  m = rpart(Y ~ X, data = B,\n            cp = 0.007,\n            minsplit = 1,\n            minbucket = 1,\n            maxdepth = 15)\n  X.vals = data.frame(\"X\"=seq(min(data$X), max(data$X), 0.1))\n  boots.append = data.frame(\"X\"=X.vals, \"predictions\"=predict(m, X.vals), \"model\"=i)\n  boots = boots %>% bind_rows(boots.append)\n  boot.test = predict(m, newdata = testing)\n  boot.rmse[i] = caret::RMSE(boot.test, testing$Y)\n}\navg.mod = boots %>%\n  group_by(X) %>%\n  summarize(predictions = mean(predictions))\nmean(boot.rmse)\n\n[1] 1.389182\n\n\n\nggplot() +\n  geom_point(data = data, aes(x=X,y=Y), pch=21, color=\"black\", bg=\"gray\", size=2) +\n  geom_line(aes(x=X,y=TRUE_Y), color = \"deepskyblue\", alpha = 0.4, size =3) +\n  geom_line(data = boots, aes(x=X,y=predictions, group=model), alpha=0.3) +\n  geom_line(data = avg.mod, aes(x=X, y=predictions), size=2, color=\"red\", alpha=0.7) +\n  labs(title = \"Bootstrap Aggregated Deep/Flexible Trees\") +\n  theme_clean()\n\n\n\n\n\n\nRandomly Altering cp with each bootstrap iteration.\n\nboots = data.frame(\"X\"=NULL, \"predictions\"=NULL, \"modelNo\"=NULL)\nnum.boots = 200\nfor(i in 1:num.boots) {\n  B = data[sample(c(1:nrow(data)), nrow(data), replace = TRUE), ]\n  m = rpart(Y ~ X, data = B,\n            cp = sample(seq(0.0, 0.075, 0.0001), 1),\n            minsplit = 1,\n            minbucket = 1,\n            maxdepth = 15)\n  X.vals = data.frame(\"X\"=seq(min(data$X), max(data$X), 0.1))\n  boots.append = data.frame(\"X\"=X.vals, \"predictions\"=predict(m, X.vals), \"model\"=i)\n  boots = boots %>% bind_rows(boots.append)\n}\navg.mod = boots %>%\n  group_by(X) %>%\n  summarize(predictions = mean(predictions))\n\n\nggplot() +\n  geom_point(data = data, aes(x=X,y=Y), pch=21, color=\"black\", bg=\"gray\", size=2) +\n  geom_line(aes(x=X,y=TRUE_Y), color = \"deepskyblue\", alpha = 0.4, size =3) +\n  geom_line(data = boots, aes(x=X,y=predictions, group=model), alpha=0.3) +\n  geom_line(data = avg.mod, aes(x=X, y=predictions), size=2, color=\"red\", alpha=0.7) +\n  labs(title = \"Bootstrap Aggregated Trees with random cp-pruning\") +\n  theme_clean()\n\n\n\n\n\nlibrary(ipred)\nboost_train = function(df, number, shrink=1) {\n# This function will take in our data\n# it will create a sequence of <number> # weak learners (trees) and return the # sequence of weak learners at the end. #\n# Parameters\n# -----------------------------------\n#       df : the data frame containing Y, X.\n#   number : the number of weak learners\n#            to use in sequence\n#   shrink : the shrinkage in error updating\n#            and learning (0, 1). Default\n#            value is 1.\n#\n# Returns\n# -----------------------------------\n#   wlearn : list of weak learners trained\n#            on the data df.\n  \n  df$error = df$Y # initialize the error = Y\n  wlearn = list() # create empty list to contain learners predictions = rep(0, nrow(df)) # create prediction vector. \n  for (k in 1:number) {\n  # We will use simple decision trees, which can be \n    # \"bagged\" if we set nbagg > 1.\n    wlearn[[k]] = rpart(formula = error ~ X,\n                    data = df,\n                    maxdepth=1, cp = 0) \n    # Update the errors for the next weak learner.\n    df$error = df$error - shrink * predict(wlearn[[k]], df, type=\"vector\")\n  }\n# provide the weak learn list to ensure \n# it is returned.\n  wlearn\n}\n\n\nboost_predict = function(learners, data, shrink=1) {\n  # Applies the learners to the data to get\n  # the strong learner prediction.\n  \n  # Parameters\n  # -----------------------------------\n  #   learners : list of weak learners\n  #       data : data to input into the \n  #              strong learner\n  #\n  # Returns\n  # -----------------------------------\n  #   pred : vector of predictions from \n  #          the strong learner.\n  \n  N = length(data) # determine # of rows.\n  NBoost = length(learners) # number of learners\n  pred = rep(0, N) # initialize predictions @ 0.\n  for (k in 1:NBoost) {\n    # Use predict function iteratively\n    # to obtain combined prediction.\n    pred = pred + shrink*predict(learners[[k]],\n                          newdata = data,\n                          type=\"vector\")\n  }\n  # Return the prediction vector.\n  pred\n}\n\n\nlearners = boost_train(data, 500, 1)\nboost.pred = boost_predict(learners, X.vals, 1)\n\n\nggplot() +\n  geom_line(aes(x=X, y=TRUE_Y), color=\"deepskyblue\", alpha = 0.4, size = 3) +\n  geom_point(data = data, aes(x=X,y=Y),pch=21, color=\"black\", bg=\"gray\", size=2) +\n  geom_line(aes(x=X.vals$X, y=boost.pred), color=\"red\", size = 2, alpha = 0.7)\n\n\n\n\nNow use caret to train a tuned regression tree, random forest, and a gradient boosting machine on the data and compare\n\nctrl = caret::trainControl(method = \"cv\", number = 5)\ndt = train(Y ~ .,\n           data = data,\n           method = \"rpart\",\n           trControl = ctrl,\n           tuneGrid = expand.grid(cp = seq(0, 1, 0.01)),\n           control = rpart.control(maxdepth = 9, minsplit = 1))\n\nWarning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, :\nThere were missing values in resampled performance measures.\n\nplot(dt)\n\n\n\n\n\ndata(\"USArrests\")\n\n\nctrl = caret::trainControl(method = \"cv\", number = 10)\nrf = caret::train(Murder ~ .,\n                  data = USArrests,\n                  method = 'rf',\n                  trainControl = ctrl,\n                  tuneGrid = expand.grid(mtry = c(1,2,3)))\nrf\n\nRandom Forest \n\n50 samples\n 3 predictor\n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 50, 50, 50, 50, 50, 50, ... \nResampling results across tuning parameters:\n\n  mtry  RMSE      Rsquared   MAE     \n  1     2.786967  0.6287161  2.305333\n  2     2.730548  0.6380341  2.229039\n  3     2.874331  0.6040413  2.323361\n\nRMSE was used to select the optimal model using the smallest value.\nThe final value used for the model was mtry = 2."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Basic Bagging\n\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2021\n\n\nBrett Devine\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCampaign Resposne Rate\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPractice File\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "![](bd_logo.png){width=0.5in}",
    "section": "",
    "text": "All things economics, business data science, and information theory."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am an economist and data scientist with an endless fascination with information theory. My economics research touches upon the role of information in economics and also issues of entrepreneurship.\nAs an Assistant Professor of Business Analytics at Hamline University, I teach graduate and undergraduate courses on data science applications in businesss and mentor students in their efforts to gain the skills for an analtyics career."
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "CV",
    "section": "",
    "text": "Education\n\nPh.D. Economics, Washington State University (July 2018)\nB.S. Economics, Brigham Young University (May 2012)\n\n\n\nExperience\n\nAssistant Professor of Business Analytics, Hamline University. August 2019 - Present.\nVisiting Assistant Professor, Washington State University. August 2018 - July 2019.\n\n\n\nResearch\n\n\nTeaching\n\nData Mining\nMachine Learning II\nIntroduction to Business Analytics\n\n\n\nConferences"
  },
  {
    "objectID": "projects/Bayes_ResponseRate.html#prior-beliefs",
    "href": "projects/Bayes_ResponseRate.html#prior-beliefs",
    "title": "Campaign Resposne Rate",
    "section": "Prior Beliefs",
    "text": "Prior Beliefs\n\n\n\nResponse rate is a number between 0 and 1.\nBut what are the chances response rate takes on any one number in that interval?\nBefore observing any evidence based on factual data, we might consider any value as equally likely.\nWe admit to being totally ignorant.\n\n\n\n\n\n\n\n\nFigure 1: Prior beliefs"
  }
]